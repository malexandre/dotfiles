{
  "author": {
    "name": "GlitchMr",
    "email": "glitchmr@myopera.com",
    "url": "http://glitchmr.pl/"
  },
  "name": "sprint",
  "description": "Complex sprintf() implementation",
  "version": "0.3.1",
  "homepage": "https://github.com/GlitchMr/sprint",
  "keywords": [
    "sprintf",
    "format",
    "snprintf",
    "printf",
    "fprintf",
    "vprintf",
    "vfprintf",
    "vsprintf",
    "vsnprintf",
    "vasprintf",
    "print",
    "echo"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/GlitchMr/sprint.git"
  },
  "main": "./lib/sprint",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/GlitchMr/sprint/raw/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/GlitchMr/sprint/issues"
  },
  "scripts": {
    "test": "node test/sprint"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/GlitchMr/sprint.png?branch=master)](http://travis-ci.org/GlitchMr/sprint)\n\n`sprint` is implementation of `sprintf` function from C++. If it is ran in\nNode.js envirnoment then it's used as module, otherwise module inserts\n`sprint()` function into global object (usually `window`).\n\nUsage:\n\n```javascript\n// Node.js\nvar sprint = require('sprint');\n// Will return \"b a\"\nconsole.log(sprint('%2$s %1$s', 'a', 'b'));\n```\n\nAll standard format placeholders are supported with the exception of `%p`\n(lack of pointers in JavaScript) and `%n` (lack of references in JavaScript).\n\nIn addition, following non-standard features are supported:\n\n* `n$` - number of the parameter allowing the parameters to be used multiple\n  times or displayed in different order. It's not in C99, but it's POSIX\n  entension, so support for it is already common.\n* `%b` and `%B` - a binary number\n* `%D`, `%U`, `%O` - practially their lowercase variants. Inserted in this\n  list just because of their usage in Perl's `printf()` implementation.\n* `%v` - vectors (from Perl implementation of `sprintf()`)\n\nFor more information, read documentation of `sprintf()` in other programming\nlanguages.\n\n* http://www.cplusplus.com/reference/clibrary/cstdio/sprintf/\n* http://perldoc.perl.org/functions/sprintf.html\n* http://www.php.net/manual/en/function.sprintf.php\n* http://www.ruby-doc.org/core-1.9.3/Kernel.html#method-i-sprintf\n* http://en.wikipedia.org/wiki/Printf#Format_placeholders\n\nIf certain feature doesn't exist and you think it should exist, feel free to\n[make issue](https://github.com/GlitchMr/sprint/issues) about it. Unless it's\nimpossible to implement it, you can expect it in next major release.\n\nAnd last thing before I will end this `README` file, have fun!\n",
  "readmeFilename": "README.md",
  "_id": "sprint@0.3.1",
  "dist": {
    "shasum": "f3b182ab06d50304ccfb7758d2f333f65d0aff2a"
  },
  "_from": "sprint@0.3.1",
  "_resolved": "https://registry.npmjs.org/sprint/-/sprint-0.3.1.tgz"
}
